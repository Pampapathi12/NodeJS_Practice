In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.
In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.In **Node.js**, you can generate, store, and validate JWT tokens (Bearer tokens) using libraries like `jsonwebtoken`. Here’s a step-by-step guide for implementing token-based authentication with **Node.js**, **Express.js**, and **MongoDB** (or any database for token storage).

### Steps for JWT-Based Authentication in Node.js

### 1. **Setup Node.js and Express.js**

First, create a basic Node.js and Express application if you haven't already.

```bash
mkdir node-jwt-auth
cd node-jwt-auth
npm init -y
npm install express jsonwebtoken bcryptjs mongoose
```

### 2. **JWT Token Generation and Validation**

Use `jsonwebtoken` for creating and validating tokens, and `bcryptjs` to hash and compare passwords.

### Example File Structure:

```
node-jwt-auth
│   app.js
└───models
    │   user.js
└───routes
    │   auth.js
```

### 3. **User Model (Mongoose)**

Here’s a simple `User` model if you’re using MongoDB:

**`models/user.js`:**

```js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

// Hash the password before saving the user
userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

const User = mongoose.model('User', userSchema);
module.exports = User;
```

### 4. **Authentication Route (auth.js)**

Create a route to handle user registration, login, and token generation.

**`routes/auth.js`:**

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../models/user');

const router = express.Router();

const JWT_SECRET = 'your-secret-key'; // Use env variable for this

// Register a new user
router.post('/register', async (req, res) => {
    const { email, password } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'User already exists' });
        }

        const user = new User({ email, password });
        await user.save();
        res.status(201).json({ message: 'User created successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

// Login and generate token
router.post('/login', async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ message: 'Invalid credentials' });
        }

        // Generate JWT Token
        const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, {
            expiresIn: '1h', // Token expires in 1 hour
        });

        res.json({
            access_token: token,
            token_type: 'Bearer',
            expires_in: 3600,
        });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
});

module.exports = router;
```

### 5. **Token Validation Middleware**

You’ll need middleware to verify the token on each protected route.

**`middleware/auth.js`:**

```js
const jwt = require('jsonwebtoken');
const JWT_SECRET = 'your-secret-key'; // Use env variable for this

const auth = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: 'No token, authorization denied' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        res.status(401).json({ message: 'Invalid token' });
    }
};

module.exports = auth;
```

### 6. **Protected Routes**

Create routes that require authentication by using the `auth` middleware.

**`routes/protected.js`:**

```js
const express = require('express');
const auth = require('../middleware/auth');

const router = express.Router();

// Example of a protected route
router.get('/dashboard', auth, (req, res) => {
    res.json({ message: `Welcome, ${req.user.email}` });
});

module.exports = router;
```

### 7. **Main App Setup**

Combine everything in the `app.js` file.

**`app.js`:**

```js
const express = require('express');
const mongoose = require('mongoose');
const authRoutes = require('./routes/auth');
const protectedRoutes = require('./routes/protected');

const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/node-jwt-auth', {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

app.use('/api/auth', authRoutes);
app.use('/api/protected', protectedRoutes);

app.listen(3000, () => {
    console.log('Server started on port 3000');
});
```

### 8. **Testing the Authentication**

- **Register a User**: `POST /api/auth/register`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

- **Login and Get Token**: `POST /api/auth/login`

```json
{
  "email": "test@example.com",
  "password": "password123"
}
```

Response:

```json
{
  "access_token": "your.jwt.token",
  "token_type": "Bearer",
  "expires_in": 3600
}
```

- **Access Protected Route**: `GET /api/protected/dashboard`

Use the `access_token` in the request header:

```
Authorization: Bearer your.jwt.token
```

### 9. **Optional: Storing Tokens in Database**

If you want to store tokens in a database, you can add a `Token` model and store the token after login. Each time you validate the token in middleware, check the database to see if it’s valid.

**`models/token.js`:**

```js
const mongoose = require('mongoose');

const tokenSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    token: { type: String, required: true },
    createdAt: { type: Date, default: Date.now, expires: '1h' } // Token expires in 1 hour
});

const Token = mongoose.model('Token', tokenSchema);
module.exports = Token;
```

In your login route, you would store the token in the `Token` collection:

```js
const token = new Token({ userId: user._id, token: tokenString });
await token.save();
```

During token validation, you would check the token's existence in the database:

```js
const storedToken = await Token.findOne({ token: token });
if (!storedToken) {
    return res.status(401).json({ message: 'Token is invalid or expired' });
}
```

---

### Conclusion

This flow provides a full solution for generating, validating, and protecting API routes with JWT in **Node.js**. If you're storing tokens in the database, you can also revoke them manually or automatically after expiration. This is commonly used in Node.js backends when integrating with mobile or web applications.